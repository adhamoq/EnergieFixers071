// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'visit.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

Visit _$VisitFromJson(Map<String, dynamic> json) => Visit(
      id: (json['id'] as num?)?.toInt(),
      volunteerId: (json['volunteerId'] as num?)?.toInt(),
      volunteer2Id: (json['volunteer2Id'] as num?)?.toInt(),
      address: json['address'] as String,
      visitDate: DateTime.parse(json['visitDate'] as String),
      startTime: json['startTime'] == null
          ? null
          : DateTime.parse(json['startTime'] as String),
      endTime: json['endTime'] == null
          ? null
          : DateTime.parse(json['endTime'] as String),
      appointmentTime: json['appointmentTime'] as String?,
      residentsCount: (json['residentsCount'] as num?)?.toInt() ?? 1,
      energyMeasuresTaken: json['energyMeasuresTaken'] as bool? ?? false,
      whichMeasures: json['whichMeasures'] as String?,
      ventilationChecked: json['ventilationChecked'] as bool? ?? false,
      energyUsageChecked: json['energyUsageChecked'] as bool? ?? false,
      contractDuration: json['contractDuration'] as String?,
      electricityConsumption:
          (json['electricityConsumption'] as num?)?.toDouble(),
      gasConsumption: (json['gasConsumption'] as num?)?.toDouble(),
      monthlyAmount: (json['monthlyAmount'] as num?)?.toDouble(),
      energyBillConcerns: json['energyBillConcerns'] as bool? ?? false,
      radiatorFoilMeters:
          (json['radiatorFoilMeters'] as num?)?.toDouble() ?? 0.0,
      radiatorFanNeeded: json['radiatorFanNeeded'] as bool? ?? false,
      smallPowerStripNeeded: json['smallPowerStripNeeded'] as bool? ?? false,
      ledLampsNeeded: json['ledLampsNeeded'] as bool? ?? false,
      e14LedsCount: (json['e14LedsCount'] as num?)?.toInt() ?? 0,
      e27LedsCount: (json['e27LedsCount'] as num?)?.toInt() ?? 0,
      draftStripMeters: (json['draftStripMeters'] as num?)?.toDouble() ?? 0.0,
      doorDraftBand: json['doorDraftBand'] as bool? ?? false,
      doorClosers: json['doorClosers'] as bool? ?? false,
      doorCloserSpring: json['doorCloserSpring'] as bool? ?? false,
      allInteriorDoorsPresent: json['allInteriorDoorsPresent'] as bool? ?? true,
      missingDoors: json['missingDoors'] as String?,
      missingDoorsLivingRoom: json['missingDoorsLivingRoom'] as String?,
      missingDoorsKitchen: json['missingDoorsKitchen'] as String?,
      missingDoorsBedroom: json['missingDoorsBedroom'] as String?,
      missingDoorsHallway: json['missingDoorsHallway'] as String?,
      showerTimer: json['showerTimer'] as bool? ?? false,
      showerHead: json['showerHead'] as bool? ?? false,
      cvWebsiteMentioned: json['cvWebsiteMentioned'] as bool? ?? false,
      currentCvTemperature: (json['currentCvTemperature'] as num?)?.toInt(),
      cvTemperatureLoweredTo: (json['cvTemperatureLoweredTo'] as num?)?.toInt(),
      cvWaterPressureUnder1Bar:
          json['cvWaterPressureUnder1Bar'] as bool? ?? false,
      tapComfortOff: json['tapComfortOff'] as bool? ?? false,
      largePowerStripNeeded: json['largePowerStripNeeded'] as bool? ?? false,
      problemsWith: json['problemsWith'] as String?,
      moldIssues: json['moldIssues'] as bool? ?? false,
      moistureIssues: json['moistureIssues'] as bool? ?? false,
      draftIssues: json['draftIssues'] as bool? ?? false,
      problemRoomsDescription: json['problemRoomsDescription'] as String?,
      hygrometerNeeded: json['hygrometerNeeded'] as bool? ?? false,
      communityBuilding: json['communityBuilding'] as String?,
      knowsPotentialFixers: json['knowsPotentialFixers'] as bool? ?? false,
      wantsToHelp: json['wantsToHelp'] as bool? ?? false,
      tellNeighbors: json['tellNeighbors'] as bool? ?? false,
      oldRefrigerator: json['oldRefrigerator'] as bool? ?? false,
      shareInfoWithHousingCorp:
          json['shareInfoWithHousingCorp'] as bool? ?? false,
      keepUpdatedOnResults: json['keepUpdatedOnResults'] as bool? ?? false,
      otherRemarks: json['otherRemarks'] as String?,
      residentEmail: json['residentEmail'] as String?,
      photos: json['photos'] as String?,
      photosUrl: json['photosUrl'] as String?,
      moldComplaint: json['moldComplaint'] as bool? ?? false,
      draftComplaint: json['draftComplaint'] as bool? ?? false,
      koboSubmissionId: json['koboSubmissionId'] as String?,
      koboUuid: json['koboUuid'] as String?,
      submissionTime: json['submissionTime'] == null
          ? null
          : DateTime.parse(json['submissionTime'] as String),
      visitData: json['visitData'] as String?,
      status: json['status'] as String? ?? 'completed',
      notes: json['notes'] as String?,
      createdAt: json['createdAt'] == null
          ? null
          : DateTime.parse(json['createdAt'] as String),
      updatedAt: json['updatedAt'] == null
          ? null
          : DateTime.parse(json['updatedAt'] as String),
    );

Map<String, dynamic> _$VisitToJson(Visit instance) => <String, dynamic>{
      'id': instance.id,
      'volunteerId': instance.volunteerId,
      'volunteer2Id': instance.volunteer2Id,
      'address': instance.address,
      'visitDate': instance.visitDate.toIso8601String(),
      'startTime': instance.startTime?.toIso8601String(),
      'endTime': instance.endTime?.toIso8601String(),
      'appointmentTime': instance.appointmentTime,
      'residentsCount': instance.residentsCount,
      'energyMeasuresTaken': instance.energyMeasuresTaken,
      'whichMeasures': instance.whichMeasures,
      'ventilationChecked': instance.ventilationChecked,
      'energyUsageChecked': instance.energyUsageChecked,
      'contractDuration': instance.contractDuration,
      'electricityConsumption': instance.electricityConsumption,
      'gasConsumption': instance.gasConsumption,
      'monthlyAmount': instance.monthlyAmount,
      'energyBillConcerns': instance.energyBillConcerns,
      'radiatorFoilMeters': instance.radiatorFoilMeters,
      'radiatorFanNeeded': instance.radiatorFanNeeded,
      'smallPowerStripNeeded': instance.smallPowerStripNeeded,
      'ledLampsNeeded': instance.ledLampsNeeded,
      'e14LedsCount': instance.e14LedsCount,
      'e27LedsCount': instance.e27LedsCount,
      'draftStripMeters': instance.draftStripMeters,
      'doorDraftBand': instance.doorDraftBand,
      'doorClosers': instance.doorClosers,
      'doorCloserSpring': instance.doorCloserSpring,
      'allInteriorDoorsPresent': instance.allInteriorDoorsPresent,
      'missingDoors': instance.missingDoors,
      'missingDoorsLivingRoom': instance.missingDoorsLivingRoom,
      'missingDoorsKitchen': instance.missingDoorsKitchen,
      'missingDoorsBedroom': instance.missingDoorsBedroom,
      'missingDoorsHallway': instance.missingDoorsHallway,
      'showerTimer': instance.showerTimer,
      'showerHead': instance.showerHead,
      'cvWebsiteMentioned': instance.cvWebsiteMentioned,
      'currentCvTemperature': instance.currentCvTemperature,
      'cvTemperatureLoweredTo': instance.cvTemperatureLoweredTo,
      'cvWaterPressureUnder1Bar': instance.cvWaterPressureUnder1Bar,
      'tapComfortOff': instance.tapComfortOff,
      'largePowerStripNeeded': instance.largePowerStripNeeded,
      'problemsWith': instance.problemsWith,
      'moldIssues': instance.moldIssues,
      'moistureIssues': instance.moistureIssues,
      'draftIssues': instance.draftIssues,
      'problemRoomsDescription': instance.problemRoomsDescription,
      'hygrometerNeeded': instance.hygrometerNeeded,
      'communityBuilding': instance.communityBuilding,
      'knowsPotentialFixers': instance.knowsPotentialFixers,
      'wantsToHelp': instance.wantsToHelp,
      'tellNeighbors': instance.tellNeighbors,
      'oldRefrigerator': instance.oldRefrigerator,
      'shareInfoWithHousingCorp': instance.shareInfoWithHousingCorp,
      'keepUpdatedOnResults': instance.keepUpdatedOnResults,
      'otherRemarks': instance.otherRemarks,
      'residentEmail': instance.residentEmail,
      'photos': instance.photos,
      'photosUrl': instance.photosUrl,
      'moldComplaint': instance.moldComplaint,
      'draftComplaint': instance.draftComplaint,
      'koboSubmissionId': instance.koboSubmissionId,
      'koboUuid': instance.koboUuid,
      'submissionTime': instance.submissionTime?.toIso8601String(),
      'visitData': instance.visitData,
      'status': instance.status,
      'notes': instance.notes,
      'createdAt': instance.createdAt?.toIso8601String(),
      'updatedAt': instance.updatedAt?.toIso8601String(),
    };
